{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\xfit.vn\\\\app\\\\application\\\\screens\\\\Terms.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport AppPreLoader from \"../components/AppPreLoader\";\nimport { NavigationActions, StackNavigator } from 'react-navigation';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Grid, Row, Col } from 'react-native-easy-grid';\nimport Icon from \"@expo/vector-icons/Entypo\";\nimport { Container, Text } from 'native-base';\nimport ConfigApp from \"../utils/ConfigApp\";\nimport HTML from 'react-native-render-html';\nimport Strings from \"../utils/Strings\";\nimport { Ionicons } from '@expo/vector-icons';\n\nvar styles = require(\"../../assets/files/Styles\");\n\nvar _Dimensions$get = Dimensions.get('window'),\n    height = _Dimensions$get.height,\n    width = _Dimensions$get.width;\n\nvar Terms = function (_Component) {\n  _inherits(Terms, _Component);\n\n  var _super = _createSuper(Terms);\n\n  function Terms(props) {\n    var _this;\n\n    _classCallCheck(this, Terms);\n\n    _this = _super.call(this, props);\n    _this._isMounted = false;\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(Terms, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this._isMounted = true;\n      return fetch(ConfigApp.URL + 'json/data_strings.php').then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        if (_this2._isMounted) {\n          _this2.setState({\n            isLoading: false,\n            dataSource: responseJson\n          }, function () {});\n        }\n      }).catch(function (error) {\n        console.error(error);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.isLoading) {\n        return React.createElement(AppPreLoader, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 9\n          }\n        });\n      }\n\n      return React.createElement(Container, {\n        style: styles.background_general,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 1\n        }\n      }, React.createElement(ScrollView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 1\n        }\n      }, React.createElement(View, {\n        style: {\n          padding: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 1\n        }\n      }, React.createElement(FlatList, {\n        data: this.state.dataSource,\n        refreshing: \"false\",\n        showsVerticalScrollIndicator: false,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(HTML, {\n            html: item.st_termsofservice,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 1\n            }\n          });\n        },\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 1\n        }\n      }), React.createElement(FlatList, {\n        data: this.state.dataSource,\n        refreshing: \"false\",\n        showsVerticalScrollIndicator: false,\n        renderItem: function renderItem(_ref2) {\n          var item = _ref2.item;\n          return React.createElement(HTML, {\n            html: item.st_privacypolicy,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 1\n            }\n          });\n        },\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 1\n        }\n      }))));\n    }\n  }]);\n\n  return Terms;\n}(Component);\n\nTerms.navigationOptions = function (_ref3) {\n  var navigation = _ref3.navigation;\n  return {\n    title: \"\" + Strings.ST82.toUpperCase(),\n    headerLeft: function headerLeft() {\n      return React.createElement(Ionicons, {\n        name: 'md-arrow-back',\n        onPress: function onPress() {\n          navigation.goBack();\n        },\n        style: styles.arrowbackicon,\n        __self: Terms,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 24\n        }\n      });\n    }\n  };\n};\n\nexport { Terms as default };","map":{"version":3,"sources":["C:/Users/DELL/Desktop/xfit.vn/app/application/screens/Terms.js"],"names":["React","Component","firebase","AppPreLoader","NavigationActions","StackNavigator","Grid","Row","Col","Icon","Container","Text","ConfigApp","HTML","Strings","Ionicons","styles","require","Dimensions","get","height","width","Terms","props","_isMounted","state","isLoading","fetch","URL","then","response","json","responseJson","setState","dataSource","catch","error","console","background_general","padding","item","st_termsofservice","index","toString","st_privacypolicy","navigationOptions","navigation","title","ST82","toUpperCase","headerLeft","goBack","arrowbackicon"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as firebase from 'firebase';\nimport AppPreLoader from '../components/AppPreLoader'; \nimport { NavigationActions, StackNavigator } from 'react-navigation';\nimport{TouchableOpacity, Dimensions, View, Image, FlatList, ScrollView} from 'react-native';\nimport {Grid, Row, Col } from 'react-native-easy-grid';\nimport Icon from 'react-native-vector-icons/Entypo';\nimport { Container, Text} from 'native-base';\nimport ConfigApp from '../utils/ConfigApp';\nimport HTML from 'react-native-render-html';\nimport Strings from '../utils/Strings';\nimport { Ionicons } from '@expo/vector-icons';\n\n\nvar styles = require('../../assets/files/Styles');\nvar {height, width} = Dimensions.get('window');\n\nexport default class Terms extends Component {\n   static navigationOptions = ({ navigation }) => ({\n    title: `${Strings.ST82.toUpperCase()}`,\n    headerLeft: () =>  <Ionicons name={'md-arrow-back'} onPress={ () => { navigation.goBack() }} style={styles.arrowbackicon}/>,\n    });\n\n_isMounted = false;\n\n\nconstructor(props) {\n\n    super(props);\n\n    this.state = {\n      isLoading: true\n    }\n\n  }\n\n  componentDidMount() {\n    \n       this._isMounted = true;\n       \n       return fetch(ConfigApp.URL+'json/data_strings.php')\n         .then((response) => response.json())\n         .then((responseJson) => {\n          if (this._isMounted) {\n\n           this.setState({\n             isLoading: false,\n             dataSource: responseJson\n           }, function() {\n           });\n           }\n         })\n         .catch((error) => {\n           console.error(error);\n         });\n     }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render () {\n\n        if (this.state.isLoading) {\n      return (\n        <AppPreLoader/>\n      );\n    }\n\n    return (\n\n<Container style={styles.background_general}>\n<ScrollView>\n\n<View style={{padding: 20}}>\n\n<FlatList\n          data={ this.state.dataSource }\n          refreshing=\"false\"\n          showsVerticalScrollIndicator={false}\n          renderItem={({item}) => \n\n<HTML html={item.st_termsofservice} />    \n\n}\n\nkeyExtractor={(item, index) => index.toString()}\n        \n        />\n\n<FlatList\n          data={ this.state.dataSource }\n          refreshing=\"false\"\n          showsVerticalScrollIndicator={false}\n          renderItem={({item}) => \n\n<HTML html={item.st_privacypolicy} />      \n\n}\n\nkeyExtractor={(item, index) => index.toString()}\n        \n        />\n\n</View>\n</ScrollView>\n\n</Container>\n\n    )\n  }\n\n}"]},"metadata":{},"sourceType":"module"}