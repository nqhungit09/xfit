{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport React from \"react-native-web/dist/index\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar windowSize = Dimensions.get('window');\n\nvar DetectDeviceService = function () {\n  function DetectDeviceService() {\n    _classCallCheck(this, DetectDeviceService);\n\n    this.pixelDensity = PixelRatio.get();\n    this.width = windowSize.width;\n    this.height = windowSize.height;\n    this.adjustedWidth = this.width * this.pixelDensity;\n    this.adjustedHeight = this.height * this.pixelDensity;\n    this.isPhoneOrTablet();\n    this.isIosOrAndroid();\n    this.detectIphoneX();\n  }\n\n  _createClass(DetectDeviceService, [{\n    key: \"isPhoneOrTablet\",\n    value: function isPhoneOrTablet() {\n      if (this.pixelDensity < 2 && (this.adjustedWidth >= 1000 || this.adjustedHeight >= 1000)) {\n        this.isTablet = true;\n        this.isPhone = false;\n      } else if (this.pixelDensity === 2 && (this.adjustedWidth >= 1824 || this.adjustedHeight >= 1824)) {\n        this.isTablet = true;\n        this.isPhone = false;\n      } else {\n        this.isTablet = false;\n        this.isPhone = true;\n      }\n    }\n  }, {\n    key: \"isIosOrAndroid\",\n    value: function isIosOrAndroid() {\n      if (Platform.OS === 'ios') {\n        this.isIos = true;\n        this.isAndroid = false;\n      } else {\n        this.isIos = false;\n        this.isAndroid = true;\n      }\n    }\n  }, {\n    key: \"detectIphoneX\",\n    value: function detectIphoneX() {\n      if (Platform.OS === 'ios' && !Platform.isPad && !Platform.isTVOS && (windowSize.height === 812 || windowSize.width === 812 || windowSize.height === 896 || windowSize.width === 896)) {\n        this.isIphoneX = true;\n      } else {\n        this.isIphoneX = false;\n      }\n    }\n  }]);\n\n  return DetectDeviceService;\n}();\n\nmodule.exports = new DetectDeviceService();","map":{"version":3,"sources":["C:/Users/DELL/Desktop/xfit.vn/app/node_modules/react-native-device-detection/index.js"],"names":["React","windowSize","Dimensions","get","DetectDeviceService","pixelDensity","PixelRatio","width","height","adjustedWidth","adjustedHeight","isPhoneOrTablet","isIosOrAndroid","detectIphoneX","isTablet","isPhone","Platform","OS","isIos","isAndroid","isPad","isTVOS","isIphoneX","module","exports"],"mappings":";;OAAOA,K;;;;AAMP,IAAMC,UAAU,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAnB;;IAEMC,mB;AACJ,iCAAc;AAAA;;AACZ,SAAKC,YAAL,GAAoBC,UAAU,CAACH,GAAX,EAApB;AACA,SAAKI,KAAL,GAAaN,UAAU,CAACM,KAAxB;AACA,SAAKC,MAAL,GAAcP,UAAU,CAACO,MAAzB;AACA,SAAKC,aAAL,GAAqB,KAAKF,KAAL,GAAa,KAAKF,YAAvC;AACA,SAAKK,cAAL,GAAsB,KAAKF,MAAL,GAAc,KAAKH,YAAzC;AAEA,SAAKM,eAAL;AACA,SAAKC,cAAL;AACA,SAAKC,aAAL;AACD;;;;sCAEiB;AAChB,UAAG,KAAKR,YAAL,GAAoB,CAApB,KAA0B,KAAKI,aAAL,IAAsB,IAAtB,IAA8B,KAAKC,cAAL,IAAuB,IAA/E,CAAH,EAAyF;AACvF,aAAKI,QAAL,GAAgB,IAAhB;AACA,aAAKC,OAAL,GAAe,KAAf;AACD,OAHD,MAGO,IAAG,KAAKV,YAAL,KAAsB,CAAtB,KAA4B,KAAKI,aAAL,IAAsB,IAAtB,IAA8B,KAAKC,cAAL,IAAuB,IAAjF,CAAH,EAA2F;AAChG,aAAKI,QAAL,GAAgB,IAAhB;AACA,aAAKC,OAAL,GAAe,KAAf;AACD,OAHM,MAGA;AACL,aAAKD,QAAL,GAAgB,KAAhB;AACA,aAAKC,OAAL,GAAe,IAAf;AACD;AACF;;;qCAEgB;AACf,UAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAnB,EAA0B;AACxB,aAAKC,KAAL,GAAa,IAAb;AACA,aAAKC,SAAL,GAAiB,KAAjB;AACD,OAHD,MAGO;AACL,aAAKD,KAAL,GAAa,KAAb;AACA,aAAKC,SAAL,GAAiB,IAAjB;AACD;AACF;;;oCAEc;AACf,UAAIH,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IACA,CAACD,QAAQ,CAACI,KADV,IAEA,CAACJ,QAAQ,CAACK,MAFV,KAIGpB,UAAU,CAACO,MAAX,KAAsB,GAAtB,IAA6BP,UAAU,CAACM,KAAX,KAAqB,GAAnD,IACCN,UAAU,CAACO,MAAX,KAAsB,GAAtB,IAA6BP,UAAU,CAACM,KAAX,KAAqB,GALrD,CAAJ,EAMO;AACN,aAAKe,SAAL,GAAiB,IAAjB;AACA,OARD,MAQO;AACN,aAAKA,SAAL,GAAiB,KAAjB;AACA;AAEA;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiB,IAAIpB,mBAAJ,EAAjB","sourcesContent":["import React, {\n  PixelRatio,\n  Platform,\n  Dimensions\n} from 'react-native';\n\nconst windowSize = Dimensions.get('window');\n\nclass DetectDeviceService {\n  constructor() {\n    this.pixelDensity = PixelRatio.get();\n    this.width = windowSize.width;\n    this.height = windowSize.height;\n    this.adjustedWidth = this.width * this.pixelDensity;\n    this.adjustedHeight = this.height * this.pixelDensity;\n    \n    this.isPhoneOrTablet();\n    this.isIosOrAndroid();\n    this.detectIphoneX();\n  }\n  \n  isPhoneOrTablet() {\n    if(this.pixelDensity < 2 && (this.adjustedWidth >= 1000 || this.adjustedHeight >= 1000)) {\n      this.isTablet = true;\n      this.isPhone = false;\n    } else if(this.pixelDensity === 2 && (this.adjustedWidth >= 1824 || this.adjustedHeight >= 1824)) {\n      this.isTablet = true;\n      this.isPhone = false;\n    } else {\n      this.isTablet = false;\n      this.isPhone = true;\n    }\n  }\n  \n  isIosOrAndroid() {\n    if(Platform.OS === 'ios') {\n      this.isIos = true;\n      this.isAndroid = false;\n    } else {\n      this.isIos = false;\n      this.isAndroid = true;\n    }\n  }\n\n  detectIphoneX(){\n\t if( Platform.OS === 'ios' &&\n      !Platform.isPad &&\n      !Platform.isTVOS &&\n      (\n        (windowSize.height === 812 || windowSize.width === 812) || // iPhone X and iPhone XS\n        (windowSize.height === 896 || windowSize.width === 896) // iPhone XS Max and XR\n      )) {\n\t \tthis.isIphoneX = true;\n\t } else {\n\t \tthis.isIphoneX = false;\n\t }\n\n  }\n}\n\nmodule.exports = new DetectDeviceService();\n"]},"metadata":{},"sourceType":"module"}